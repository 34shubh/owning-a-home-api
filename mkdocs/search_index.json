{
    "docs": [
        {
            "location": "/", 
            "text": "API usage\n\n\nThis is documentation for the API behind the Consumer Financial Protection Bureau's \nOwning-a-home tools\n.\n\n\nThe tools depend on a data set that is not available publicly, but the code behind the API and some public data are made available in the \nGitHub repository\n.\n\n\nThe documentation spells out how information can be requested from the API's three modules.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#api-usage", 
            "text": "This is documentation for the API behind the Consumer Financial Protection Bureau's  Owning-a-home tools .  The tools depend on a data set that is not available publicly, but the code behind the API and some public data are made available in the  GitHub repository .  The documentation spells out how information can be requested from the API's three modules.", 
            "title": "API usage"
        }, 
        {
            "location": "/api/", 
            "text": "API endpoints\n\n\nThe Owning-a-home API includes three modules:\n\n\nratechecker\n\n\nThis app exposes two API endpoints, \n/oah-api/rates/rate-checker\n and\n\n/oah-api/rates/rate-checker-fees\n, with the following parameters:\n\n\n\n\n\n\n\n\nParam name\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nAcceptable values\n(values = description)\n\n\n\n\n\n\n\n\n\n\narm_type\n\n\nThe type of ARM\n\n\nNo, unless rate_structure=arm\n\n\nN/A\n\n\n3-1 = 3/1 ARM,\n5-1 = 5/1 ARM,\n7-1 = 7/1 ARM,\n10-1 = 10/1 ARM\n\n\n\n\n\n\ninstitution\n\n\nThe institution name\n\n\nNo\n\n\nN/A\n\n\nany valid institution name\n, for ex. BANKA, BANKB, etc.\n\n\n\n\n\n\nio\n\n\nInterest only flag -- only applicable to ARM loans\n\n\nNo\n\n\n0\n\n\n0 = false,\n1 = true,\nblank\n\n\n\n\n\n\nloan_amount\n\n\nThe amount of the loan\n\n\nYes\n\n\nN/A\n\n\nany positive integer\n\n\n\n\n\n\nloan_purpose\n\n\nThe purpose of the loan\n\n\nNo\n\n\nPURCH\n\n\nPURCH = New Purchase,\nREFI = Refinance\n\n\n\n\n\n\nloan_term\n\n\nThe loan term (years)\n\n\nYes\n\n\nN/A\n\n\n30, 15\n\n\n\n\n\n\nloan_type\n\n\nThe type of loan\n\n\nYes\n\n\nN/A\n\n\nJUMBO = Jumbo Loan,\nCONF = Conventional Loan,\nAGENCY = Agency Loan,\nFHA = Federal Housing Administration Loan,\nVA = Veteran Affairs Loan,\nVA-HB = Veteran Affairs High Balance Loan,\nFHA-HB = Federal Housing Administration High Balance Loan\n\n\n\n\n\n\nlock\n\n\nRate lock period\n\n\nNo\n\n\n60\n\n\nTypically, 30, 45, or 60.\nOne lender in the database has non-standard rate lock periods, so the code converts a single number to a range: \n= 30; \n30 and \n=45; \n45 and \n= 60 respectively\n\n\n\n\n\n\nltv \n*1\n\n\nLoan to value\n\n\nNo\n\n\nN/A\n\n\nCalculated by dividing the loan amount by the house price\n\n\n\n\n\n\nmaxfico\n\n\nThe maximum FICO score\n\n\nYes\n\n\nN/A\n\n\n0 - 850.\nIn practice, \n600 will return no results.  For optimal functioning, MinFICO and MaxFICO should be coordinated.  Either, they should be the same value, thereby providing a point estimate of the FICO score, or they should be configured to provide a 20-point range, eg, 700-719.  Ranges should be specified to start on an even 20 multiple and end on a 19, 39, 59, etc., except for the top bucket which is 840-850.\n\n\n\n\n\n\nminfico\n\n\nThe minimum FICO score\n\n\nYes\n\n\nN/A\n\n\n0 - 850,\nsee maxfico for more info.\n\n\n\n\n\n\npoints\n\n\nPoints\n\n\nNo\n\n\n0\n\n\nThis number is used as the centroid of a range, +/- 0.5, to constrain the results. Input could be any decimal roughly within -4 to +4, but in practice anything outside of -2 to +3 is likely to have few results.\n\n\n\n\n\n\nprice\n\n\nThe price of the property\n\n\nYes\n\n\nN/A\n\n\nIn general, should be larger than the loan_amount.\n\n\n\n\n\n\nproperty_type\n\n\nThe property type\n\n\nNo\n\n\nSF\n\n\nSF = Single Family;\nCONDO = Condominium;\nCOOP = Housing Cooperative (co-op)\n\n\n\n\n\n\nrate_structure\n\n\nThe rate structure of the loan\n\n\nYes\n\n\nN/A\n\n\nFIXED = Fixed Rate,\nARM = Adjusted Rate Mortgage\n\n\n\n\n\n\nstate\n\n\nThe US state\n\n\nYes\n\n\nN/A\n\n\nall the US state's abbreviations\n\n\n\n\n\n\n\n\n*1: We actually calculate its value and don't check the value sent in request\n\n\nratechecker will return a JSON object containing \ndata\n and \ntimestamp\n, it will also contain\n\nfees\n field when requesting \n/oah-api/rates/rate-checker-fees\n.\n\n\nratechecker has a management command, \nload_daily_data\n, which loads daily interest rate data from CSV.\n\n\ncountylimits\n\n\nThis app exposes a single API endpoint, \n/oah-api/county\n, which requires a \nstate\n parameter for querying Federal Housing Administration loan lending limit, Government-Sponsored Enterprises mortgage loan limit and the Department of Veterans Affairs loan guaranty program limit for the counties in a given state.\n\n\n\n\n\n\n\n\nParam name\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nAcceptable values\n\n\n\n\n\n\n\n\n\n\nstate\n\n\nThe US state\n\n\nYes\n\n\nN/A\n\n\nall the US state's abbreviations\n or \nfips codes\n\n\n\n\n\n\n\n\ncountylimits will return a JSON object containing \nstate\n, \ncounty\n, \ncomplete_fips\n, \ngse_limit\n, \nfha_limit\n, and \nva_limit\n.\n\n\ncountylimits has a management command, \nload_county_limits\n, that loads these limits from a CSV file. Source CSVs are stored in the /data directory. The latest version is \ndata/2017/2017_amended.csv\n.\n\n\nThe \nload_county_limits\n command takes two arguments to fully run: file path and \n--confirm=y\n\n\nSo the full command to load the data for 2017 was:\n\n\npython manage.py load_county_limits data/2017/2017_amended.csv --confirm=y\n\n\n\n\nThe command deletes all State, County and CountyLimit objects and reloads them.\n\n\nSee \n/data/2017/README.md\n for details about the 2017 data.\n\n\nCountylimit data updates normally occur in late December. After an update is loaded and tested, we export it as a fixture for testing, and as a local loading option. We use this command to update the fixture:\n\n\npython manage.py dumpdata countylimits --indent=4 \n countylimits/fixtures/countylimit_data.json\n\n\n\n\nAnd it can be loaded locally with:\n\n\npython manage.py loaddata countylimit_data.json\n\n\n\n\nOur standard loading path on servers is to use the \nload_county_limits\n management command.", 
            "title": "API endpoints"
        }, 
        {
            "location": "/api/#api-endpoints", 
            "text": "The Owning-a-home API includes three modules:", 
            "title": "API endpoints"
        }, 
        {
            "location": "/api/#ratechecker", 
            "text": "This app exposes two API endpoints,  /oah-api/rates/rate-checker  and /oah-api/rates/rate-checker-fees , with the following parameters:     Param name  Description  Required  Default value  Acceptable values (values = description)      arm_type  The type of ARM  No, unless rate_structure=arm  N/A  3-1 = 3/1 ARM, 5-1 = 5/1 ARM, 7-1 = 7/1 ARM, 10-1 = 10/1 ARM    institution  The institution name  No  N/A  any valid institution name , for ex. BANKA, BANKB, etc.    io  Interest only flag -- only applicable to ARM loans  No  0  0 = false, 1 = true, blank    loan_amount  The amount of the loan  Yes  N/A  any positive integer    loan_purpose  The purpose of the loan  No  PURCH  PURCH = New Purchase, REFI = Refinance    loan_term  The loan term (years)  Yes  N/A  30, 15    loan_type  The type of loan  Yes  N/A  JUMBO = Jumbo Loan, CONF = Conventional Loan, AGENCY = Agency Loan, FHA = Federal Housing Administration Loan, VA = Veteran Affairs Loan, VA-HB = Veteran Affairs High Balance Loan, FHA-HB = Federal Housing Administration High Balance Loan    lock  Rate lock period  No  60  Typically, 30, 45, or 60. One lender in the database has non-standard rate lock periods, so the code converts a single number to a range:  = 30;  30 and  =45;  45 and  = 60 respectively    ltv  *1  Loan to value  No  N/A  Calculated by dividing the loan amount by the house price    maxfico  The maximum FICO score  Yes  N/A  0 - 850. In practice,  600 will return no results.  For optimal functioning, MinFICO and MaxFICO should be coordinated.  Either, they should be the same value, thereby providing a point estimate of the FICO score, or they should be configured to provide a 20-point range, eg, 700-719.  Ranges should be specified to start on an even 20 multiple and end on a 19, 39, 59, etc., except for the top bucket which is 840-850.    minfico  The minimum FICO score  Yes  N/A  0 - 850, see maxfico for more info.    points  Points  No  0  This number is used as the centroid of a range, +/- 0.5, to constrain the results. Input could be any decimal roughly within -4 to +4, but in practice anything outside of -2 to +3 is likely to have few results.    price  The price of the property  Yes  N/A  In general, should be larger than the loan_amount.    property_type  The property type  No  SF  SF = Single Family; CONDO = Condominium; COOP = Housing Cooperative (co-op)    rate_structure  The rate structure of the loan  Yes  N/A  FIXED = Fixed Rate, ARM = Adjusted Rate Mortgage    state  The US state  Yes  N/A  all the US state's abbreviations     *1: We actually calculate its value and don't check the value sent in request  ratechecker will return a JSON object containing  data  and  timestamp , it will also contain fees  field when requesting  /oah-api/rates/rate-checker-fees .  ratechecker has a management command,  load_daily_data , which loads daily interest rate data from CSV.", 
            "title": "ratechecker"
        }, 
        {
            "location": "/api/#countylimits", 
            "text": "This app exposes a single API endpoint,  /oah-api/county , which requires a  state  parameter for querying Federal Housing Administration loan lending limit, Government-Sponsored Enterprises mortgage loan limit and the Department of Veterans Affairs loan guaranty program limit for the counties in a given state.     Param name  Description  Required  Default value  Acceptable values      state  The US state  Yes  N/A  all the US state's abbreviations  or  fips codes     countylimits will return a JSON object containing  state ,  county ,  complete_fips ,  gse_limit ,  fha_limit , and  va_limit .  countylimits has a management command,  load_county_limits , that loads these limits from a CSV file. Source CSVs are stored in the /data directory. The latest version is  data/2017/2017_amended.csv .  The  load_county_limits  command takes two arguments to fully run: file path and  --confirm=y  So the full command to load the data for 2017 was:  python manage.py load_county_limits data/2017/2017_amended.csv --confirm=y  The command deletes all State, County and CountyLimit objects and reloads them.  See  /data/2017/README.md  for details about the 2017 data.  Countylimit data updates normally occur in late December. After an update is loaded and tested, we export it as a fixture for testing, and as a local loading option. We use this command to update the fixture:  python manage.py dumpdata countylimits --indent=4   countylimits/fixtures/countylimit_data.json  And it can be loaded locally with:  python manage.py loaddata countylimit_data.json  Our standard loading path on servers is to use the  load_county_limits  management command.", 
            "title": "countylimits"
        }, 
        {
            "location": "/mysql/", 
            "text": "Using MySQL\n\n\nFor testing, the default Django sqlite database will be set up for you automatically. If you want to load a MySQL dataset, you can edit \nsettings_for_testing.py\n to uncomment the MySQL database section and install MySQL as follows:\n\n\npip install requirements/mysql.txt\nbrew install mysql\n\n\n\n\nStart the MySQL Server, this command may need to be run again (if stopped) when trying to bring up the web server later:\n\n\nmysql.server start\n\n\n\n\nSet Password for root:\n\n\nmysql_secure_installation\n\n\n\n\nConnect to MySQL with root and password:\n\n\nmysql -uroot -p\n\n\n\n\nOr, if you're using \ncfgov-refresh's\n no-password local development setup, you can forgo the password step:\n\n\nmysql -uroot\n\n\n\n\nThen create an owning-a-home database:\n\n\ncreate database oah;\n\n\n\n\nIf you would like to connect with a different user other than root, you can create a user, and replace \noah_user\n with your desired username and \npassword\n with your desired password:\n\n\ncreate user 'oah_user'@'localhost' identified by 'password';\ngrant all privileges on oah.* to 'oah_user'@'localhost';\nflush privileges;\nexit\n\n\n\n\nYou can now connect to MySQL with your newly created username and password and have access to \noah\n:\n\n\nmysql -u oah_user -p\n# enter your password\nshow databases;\nuse oah;\nexit\n\n\n\n\nIf you have access to mortgage data, you could load it like so:\n\n\nmysql -uroot -p oah \n [PATH TO YOUR .sql DUMP]", 
            "title": "Using MySQL"
        }, 
        {
            "location": "/mysql/#using-mysql", 
            "text": "For testing, the default Django sqlite database will be set up for you automatically. If you want to load a MySQL dataset, you can edit  settings_for_testing.py  to uncomment the MySQL database section and install MySQL as follows:  pip install requirements/mysql.txt\nbrew install mysql  Start the MySQL Server, this command may need to be run again (if stopped) when trying to bring up the web server later:  mysql.server start  Set Password for root:  mysql_secure_installation  Connect to MySQL with root and password:  mysql -uroot -p  Or, if you're using  cfgov-refresh's  no-password local development setup, you can forgo the password step:  mysql -uroot  Then create an owning-a-home database:  create database oah;  If you would like to connect with a different user other than root, you can create a user, and replace  oah_user  with your desired username and  password  with your desired password:  create user 'oah_user'@'localhost' identified by 'password';\ngrant all privileges on oah.* to 'oah_user'@'localhost';\nflush privileges;\nexit  You can now connect to MySQL with your newly created username and password and have access to  oah :  mysql -u oah_user -p\n# enter your password\nshow databases;\nuse oah;\nexit  If you have access to mortgage data, you could load it like so:  mysql -uroot -p oah   [PATH TO YOUR .sql DUMP]", 
            "title": "Using MySQL"
        }
    ]
}